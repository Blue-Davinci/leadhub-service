# Load environment variables from .env file (if exists)
# ENV_FILE=cmd/api/.env
# include $(ENV_FILE)
# export

.PHONY: help
help:
	@echo Usage:
	@echo run/api             - run the API application
	@echo db/psql             - connect to the DB using psql
	@echo build/api           - build the cmd/api application for your platform
	@echo build/linux         - build for Linux amd64
	@echo audit               - format, vet, test, staticcheck
	@echo db/migrations/up    - run DB migrations (goose up)
	@echo vendor              - tidy and vendor dependencies
	@echo
	@echo "DevOps Commands:"
	@echo docker/build        - build docker image
	@echo docker/dev          - start development environment
	@echo docker/prod         - start production environment
	@echo deploy/staging       - deploy to staging environment
	@echo deploy/production    - deploy to production environment
	@echo test/all             - run complete test suite
	@echo health/check         - run health check

## run/api: run the cmd/api application
.PHONY: run/api
run/api:
	@echo 'Running cmd/api...'
	go run ./cmd/api

## db/psql: connect to the db using psql
.PHONY: db/psql
db/psql:
	@echo 'Connecting to the database using psql...'
	@if [ -z "$(LEADHUB_DB_DSN)" ]; then echo "LEADHUB_DB_DSN not set. Please set environment variable."; exit 1; fi
	psql "$(LEADHUB_DB_DSN)"

## db/migrations/up: run the up migrations using goose
.PHONY: db/migrations/up
db/migrations/up:
	@echo 'Running up migrations...'
	@if [ -z "$(LEADHUB_DB_DSN)" ]; then echo "LEADHUB_DB_DSN not set. Please set environment variable."; exit 1; fi
	cd internal/sql/schema && goose "$(LEADHUB_DB_DSN)" up

## audit: tidy dependencies and format, vet and test all code
.PHONY: audit
audit:
	@echo 'Formatting code...'
	go fmt ./...
	@echo 'Vetting code...'
	go vet ./...
	@echo 'Static analysis...'
	staticcheck ./...
	@echo 'Running tests...'
	go test -race -vet=off ./...

## vendor: tidy and vendor dependencies
.PHONY: vendor
vendor:
	@echo 'Tidying and verifying module dependencies...'
	go mod tidy
	go mod verify
	@echo 'Vendoring dependencies...'
	go mod vendor

## build/api: build the cmd/api application (host platform)
.PHONY: build/api
build/api:
	@echo 'Building cmd/api for host platform...'
	go build -ldflags='-s' -o ./bin/api ./cmd/api

## build/linux: build the cmd/api for linux amd64
.PHONY: build/linux
build/linux:
	@echo 'Building cmd/api for Linux amd64...'
	GOOS=linux GOARCH=amd64 go build -ldflags='-s' -o ./bin/linux_amd64_api ./cmd/api

## docker/build: build docker image
.PHONY: docker/build
docker/build:
	@echo 'Building Docker image...'
	docker build -t leadhub-service:latest .

## docker/dev: start development environment
.PHONY: docker/dev
docker/dev:
	@echo 'Starting development environment...'
	docker-compose up -d
	@echo 'Services started. Access at http://localhost:4000'

## docker/prod: start production environment  
.PHONY: docker/prod
docker/prod:
	@echo 'Starting production environment...'
	docker-compose -f docker-compose.prod.yml up -d
	@echo 'Production services started'

## deploy/staging: deploy to staging environment
.PHONY: deploy/staging
deploy/staging:
	@echo 'Deploying to staging...'
	./scripts/deploy.sh staging

## deploy/production: deploy to production environment
.PHONY: deploy/production
deploy/production:
	@echo 'Deploying to production...'
	./scripts/deploy.sh production

## test/all: run complete test suite
.PHONY: test/all
test/all:
	@echo 'Running complete test suite...'
	./test.sh

## health/check: run health check
.PHONY: health/check
health/check:
	@echo 'Running health check...'
	./scripts/healthcheck.sh http://localhost

## migrate/up: run database migrations up
.PHONY: migrate/up
migrate/up:
	@echo 'Running database migrations...'
	./scripts/migrate.sh development up

## migrate/status: check migration status
.PHONY: migrate/status
migrate/status:
	@echo 'Checking migration status...'
	./scripts/migrate.sh development status
