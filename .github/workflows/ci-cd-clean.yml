# LeadHub Service CI/CD Pipeline - Clean pipeline for testing, building, security scanning, and deployment

name: LeadHub CI/CD

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

env:
  GO_VERSION: "1.22"

jobs:
  # Test and validate code
  test:
    name: Test and Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download && go mod verify

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly"
          gofmt -s -l .
          exit 1
        fi

    - name: Vet code
      run: go vet ./...

    - name: Run tests
      run: |
        chmod +x ./test.sh
        ./test.sh

    - name: Security scan (gosec)
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...

  # Build and scan Docker image
  build:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t leadhub-service:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'leadhub-service:latest'
        format: 'table'
        severity: 'CRITICAL,HIGH'

    - name: Test Docker build
      run: |
        echo "âœ… Docker build completed successfully"
        docker images leadhub-service:latest

  # Deploy to staging
  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        chmod +x ./scripts/deploy.sh
        echo "Deployment command: ./scripts/deploy.sh staging"
        echo "âœ… Staging deployment ready"

  # Deploy to production
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        chmod +x ./scripts/deploy.sh ./scripts/healthcheck.sh
        echo "Deployment command: ./scripts/deploy.sh production"
        echo "Health check: ./scripts/healthcheck.sh"
        echo "âœ… Production deployment ready"
