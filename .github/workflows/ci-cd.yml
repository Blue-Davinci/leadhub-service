# LeadHub Service CI/CD Pipeline - Clean pipeline for testing, building, security scanning, and deployment

name: LeadHub CI/CD

on:
  push:
    branches: [master, development]
  pull_request:
    branches: [master, development]

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and validate code
  test:
    name: Test and Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download && go mod verify

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly"
            gofmt -s -l .
            exit 1
          fi

      - name: Vet code
        run: go vet ./...

      - name: Run tests
        run: |
          chmod +x ./scripts/testing/test.sh
          ./scripts/testing/test.sh

      - name: Security scan (gosec)
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          # Use -exclude to ignore false positives: G101 (false positives in generated SQL), G115 (safe int32 conversions)
          gosec -exclude=G101,G115 -fmt sarif -out gosec-results.sarif ./... || echo "Gosec scan completed with warnings"

      - name: Upload gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-results.sarif') != ''
        with:
          sarif_file: "gosec-results.sarif"

  # Build and scan Docker image
  build:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: leadhub-service:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "leadhub-service:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy to staging
  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          chmod +x ./scripts/deployment/deploy.sh
          echo "Deployment command: ./scripts/deployment/deploy.sh staging"
          echo "Staging deployment ready"

  # Deploy to production
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          chmod +x ./scripts/deployment/deploy.sh ./scripts/maintenance/healthcheck.sh
          echo "Deployment command: ./scripts/deployment/deploy.sh production"
          echo "Health check: ./scripts/maintenance/healthcheck.sh"
          echo "âœ… Production deployment ready"
