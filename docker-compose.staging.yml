# =============================================================================
# LeadHub Service - Staging Docker Compose Configuration
# =============================================================================

services:
  # =============================================================================
  # NGINX Reverse Proxy (Staging Gateway)
  # =============================================================================
  nginx:
    image: nginx:1.26-alpine
    container_name: leadhub-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-1
    networks:
      - leadhub-frontend
      - leadhub-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # LeadHub API Instance (Single instance for staging)
  # =============================================================================
  api-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: leadhub-api-staging
    env_file:
      - .env.staging
    environment:
      # Database Configuration
      LEADHUB_DB_DSN: "postgres://leadhub:${POSTGRES_PASSWORD:-leadhub_staging_password}@postgres:5432/leadhub?sslmode=disable"
      
      # Application Configuration
      PORT: 4000
      ENV: staging
      
      # SMTP Configuration
      LEADHUB_SMTP_HOST: ${SMTP_HOST:-sandbox.smtp.mailtrap.io}
      LEADHUB_SMTP_USERNAME: ${SMTP_USERNAME:-your_smtp_username}
      LEADHUB_SMTP_PASSWORD: ${SMTP_PASSWORD:-your_smtp_password}
      LEADHUB_SMTP_SENDER: "LeadHub Staging <no-reply@staging.leadhub.tech>"
      
      # Rate Limiting (Relaxed for staging)
      RATE_LIMIT_RPS: 20
      RATE_LIMIT_BURST: 40
      
      # Database Pool Settings
      DB_MAX_OPEN_CONNS: 25
      DB_MAX_IDLE_CONNS: 10
      DB_MAX_IDLE_TIME: 15m
      
      # Security Settings
      CORS_TRUSTED_ORIGINS: ${CORS_ORIGINS:-https://staging.leadhub.tech,http://localhost:3000,http://localhost:8080}
    expose:
      - "4000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - leadhub-backend
    restart: unless-stopped
    # Disable health check for now since scratch container lacks shell tools
    # The NGINX health check will verify API accessibility
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:4000/v1/health || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # =============================================================================
  # PostgreSQL Database (Staging Configuration)
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: leadhub-postgres-staging
    env_file:
      - .env.staging
    environment:
      POSTGRES_DB: leadhub
      POSTGRES_USER: leadhub
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-leadhub_staging_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"  # Expose for staging debugging
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./internal/sql/docker-init:/docker-entrypoint-initdb.d
      - postgres_logs:/var/log/postgresql
    networks:
      - leadhub-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leadhub -d leadhub"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s



  # =============================================================================
  # Monitoring & Observability (Simplified for staging)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: leadhub-prometheus-staging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - leadhub-backend
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: leadhub-grafana-staging
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_staging}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - leadhub-backend
    restart: unless-stopped

  # =============================================================================
  # Adminer for database management (Staging only)
  # =============================================================================
  adminer:
    image: adminer:4-standalone
    container_name: leadhub-adminer-staging
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - leadhub-backend
    restart: unless-stopped

# =============================================================================
# Networks (Segregated for Security)
# =============================================================================
networks:
  # Frontend network: NGINX and external access
  leadhub-frontend:
    driver: bridge
    name: leadhub-frontend-staging
  
  # Backend network: Internal services only
  leadhub-backend:
    driver: bridge
    name: leadhub-backend-staging

# =============================================================================
# Persistent Volumes
# =============================================================================
volumes:
  postgres_data:
    name: leadhub-postgres-staging
  prometheus_data:
    name: leadhub-prometheus-staging
  grafana_data:
    name: leadhub-grafana-staging
  nginx_logs:
    name: leadhub-nginx-logs-staging
  postgres_logs:
    name: leadhub-postgres-logs-staging
