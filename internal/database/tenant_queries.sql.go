// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tenant_queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const adminGetAllTenants = `-- name: AdminGetAllTenants :many
SELECT id, name, contact_email, description, created_at, updated_at
FROM tenants
WHERE ($1 = '' OR to_tsvector('simple', name) @@ plainto_tsquery('simple', $1))
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type AdminGetAllTenantsParams struct {
	Column1 interface{}
	Limit   int32
	Offset  int32
}

func (q *Queries) AdminGetAllTenants(ctx context.Context, arg AdminGetAllTenantsParams) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, adminGetAllTenants, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContactEmail,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name, contact_email, description)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at
`

type CreateTenantParams struct {
	Name         string
	ContactEmail string
	Description  sql.NullString
}

type CreateTenantRow struct {
	ID        int64
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (CreateTenantRow, error) {
	row := q.db.QueryRowContext(ctx, createTenant, arg.Name, arg.ContactEmail, arg.Description)
	var i CreateTenantRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, contact_email, description, created_at, updated_at
FROM tenants
WHERE id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id int64) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContactEmail,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET 
    name = $2,
    contact_email = $3,
    description = $4
WHERE id = $1
RETURNING id, name, contact_email, description, created_at, updated_at
`

type UpdateTenantParams struct {
	ID           int64
	Name         string
	ContactEmail string
	Description  sql.NullString
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant,
		arg.ID,
		arg.Name,
		arg.ContactEmail,
		arg.Description,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContactEmail,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
