// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_queries.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (tenant_id, name, email, password_hash, activated)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, version
`

type CreateUserParams struct {
	TenantID     int64
	Name         string
	Email        string
	PasswordHash []byte
	Activated    bool
}

type CreateUserRow struct {
	ID        int64
	CreatedAt time.Time
	Version   int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.TenantID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Activated,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, tenant_id, name, email, password_hash, activated, version, created_at, updated_at
FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Activated,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    name = $1, 
    email = $2, 
    password_hash = $3, 
    activated = $4
WHERE id = $5 AND version = $6
RETURNING version, updated_at
`

type UpdateUserParams struct {
	Name         string
	Email        string
	PasswordHash []byte
	Activated    bool
	ID           int64
	Version      int32
}

type UpdateUserRow struct {
	Version   int32
	UpdatedAt time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Activated,
		arg.ID,
		arg.Version,
	)
	var i UpdateUserRow
	err := row.Scan(&i.Version, &i.UpdatedAt)
	return i, err
}
